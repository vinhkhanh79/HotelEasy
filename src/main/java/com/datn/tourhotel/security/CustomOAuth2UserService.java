package com.datn.tourhotel.security;

import com.datn.tourhotel.model.Customer;
import com.datn.tourhotel.model.Role;
import com.datn.tourhotel.model.User;
import com.datn.tourhotel.model.enums.RoleType;
import com.datn.tourhotel.repository.CustomerRepository;
import com.datn.tourhotel.repository.RoleRepository;
import com.datn.tourhotel.repository.UserRepository;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import jakarta.mail.internet.MimeMessage;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;

@Service
@Transactional
public class CustomOAuth2UserService extends DefaultOAuth2UserService {
    @PersistenceContext
    private EntityManager entityManager;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JavaMailSender mailSender;
    private final CustomerRepository customerRepository;
    private final RoleRepository roleRepository;

    public CustomOAuth2UserService(UserRepository userRepository, PasswordEncoder passwordEncoder, JavaMailSender mailSender, CustomerRepository customerRepository, RoleRepository roleRepository) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.mailSender = mailSender;
        this.customerRepository = customerRepository;
        this.roleRepository = roleRepository;
    }

    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) {
        OAuth2User oAuth2User = super.loadUser(userRequest);
        Map<String, Object> attributes = oAuth2User.getAttributes();

        String email = null;
        String registrationId = userRequest.getClientRegistration().getRegistrationId();
        String pictureUrl = null;
        String name = null;

        // X·ª≠ l√Ω l·∫•y th√¥ng tin t·ª´ Google ho·∫∑c Facebook
        if ("google".equals(registrationId)) {
            email = (String) attributes.get("email");
            name = (String) attributes.get("name");
            pictureUrl = (String) attributes.get("picture");
        } else if ("facebook".equals(registrationId)) {
            email = (String) attributes.get("email");
            name = (String) attributes.get("name");
            pictureUrl = extractFacebookPictureUrl(attributes);
        }

        // Ki·ªÉm tra email c√≥ null kh√¥ng
        if (email == null || email.isBlank()) {
            throw new IllegalArgumentException("Email kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
        }

        // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i hay ch∆∞a
        User existingUser = userRepository.findByEmail(email);

        if (existingUser == null) {
            RandomStringGenerator randomStringGenerator = new RandomStringGenerator();
            String password = randomStringGenerator.generateRandomString();
            System.out.println(password);
            Role role = roleRepository.findById(2L).get();
            User user = User.builder()
                    .email(email)
                    .username(email) // D√πng email l√†m username
                    .password(passwordEncoder.encode(password))
                    .lastName(email)
                    .name(name)
                    .img(pictureUrl)
                    .createdDate(LocalDateTime.now())
                    .role(role)
                    .build();

            userRepository.save(user);

            // G·ª≠i email ch√†o m·ª´ng
            try {
                sendWelcomeEmail(email, email, password);
            } catch (MailException e) {
                throw new MailException("Kh√¥ng th·ªÉ g·ª≠i email.") {};
            }
        }
        saveCustomerIfNotExists(email);

        return oAuth2User;
    }

    private String getEmailFromAttributes(Map<String, Object> attributes, String registrationId) {
        if ("google".equals(registrationId) || "facebook".equals(registrationId)) {
            return (String) attributes.get("email");
        }
        throw new IllegalArgumentException("Unsupported OAuth2 provider: " + registrationId);
    }

    private String extractFacebookPictureUrl(Map<String, Object> attributes) {
        if (attributes.get("picture") instanceof Map) {
            Map<String, Object> pictureMap = (Map<String, Object>) attributes.get("picture");
            if (pictureMap.get("data") instanceof Map) {
                Map<String, Object> pictureData = (Map<String, Object>) pictureMap.get("data");
                return (String) pictureData.get("url");
            }
        }
        return null;
    }

        protected void saveCustomerIfNotExists(String email) {
            User us = userRepository.findByUsername(email);
            if (us == null) {
                throw new IllegalArgumentException("User not found for email: " + email);
            }
            User managedUser = entityManager.merge(us);

            // Check if Customer already exists
            Optional<Customer> existingCustomer = customerRepository.findByUserId(managedUser.getId());
            if (existingCustomer.isEmpty()) {
                Customer cs = new Customer(null, managedUser, null);
                customerRepository.save(cs);
            }
        }



    private void sendWelcomeEmail(String toEmail, String username, String password) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);

            String subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trang web c·ªßa ch√∫ng t√¥i!";
            String body = String.format(
                    "<html>" +
                            "<head>" +
                            "<style>" +
                            "body {" +
                            "    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;" +  // Ch·ªçn font ch·ªØ hi·ªán ƒë·∫°i, d·ªÖ ƒë·ªçc
                            "    background-color: #f9f9f9;" +  // M√†u n·ªÅn s√°ng, d·ªÖ ch·ªãu
                            "    margin: 0;" +
                            "    padding: 20px;" +
                            "    text-align: center;" +
                            "    color: #333;" +
                            "}" +
                            ".email-container {" +
                            "    background-color: #ffffff;" +  // N·ªÅn tr·∫Øng cho n·ªôi dung email
                            "    max-width: 600px;" +
                            "    margin: 50px auto;" +
                            "    padding: 30px;" +
                            "    border-radius: 10px;" +
                            "    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);" + // Hi·ªáu ·ª©ng shadow l√†m r√µ vi·ªÅn
                            "    border: 1px solid #e1e1e1;" +  // Vi·ªÅn s√°ng ƒë·ªÉ t·∫°o ƒë·ªô ph√¢n t√°ch v·ªõi n·ªÅn
                            "}" +
                            ".header h2 {" +
                            "    font-size: 36px;" +
                            "    color: #4CAF50;" +  // M√†u xanh l√° c√¢y cho ti√™u ƒë·ªÅ, t·∫°o s·ª± t∆∞∆°i m·ªõi
                            "    margin-bottom: 20px;" +
                            "    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);" +  // Hi·ªáu ·ª©ng ƒë·ªï b√≥ng nh·∫π cho ti√™u ƒë·ªÅ
                            "}" +
                            ".content {" +
                            "    font-size: 18px;" +
                            "    line-height: 1.8;" +
                            "    color: #555;" +  // M√†u ch·ªØ d·ªÖ ƒë·ªçc
                            "    margin-bottom: 20px;" +
                            "    text-align: left;" +
                            "}" +
                            ".content p {" +
                            "    margin: 15px 0;" +
                            "}" +
                            ".content ul {" +
                            "    list-style-type: none;" +
                            "    padding-left: 0;" +
                            "    font-size: 18px;" +
                            "    color: #444;" +
                            "}" +
                            ".content li {" +
                            "    margin: 8px 0;" +
                            "    padding-left: 20px;" +
                            "    text-indent: -20px;" +
                            "}" +
                            ".content li::before {" +
                            "    content: '‚úî';" +  // D·∫•u ki·ªÉm xanh cho m·ªói m·ª•c
                            "    color: #4CAF50;" +
                            "    padding-right: 10px;" +
                            "}" +
                            ".button {" +
                            "    background-color: #4CAF50;" +
                            "    color: white;" +
                            "    padding: 12px 30px;" +
                            "    border-radius: 8px;" +
                            "    font-size: 20px;" +
                            "    font-weight: bold;" +
                            "    text-decoration: none;" +
                            "    transition: background-color 0.3s ease;" +
                            "    display: inline-block;" +
                            "    margin-top: 20px;" +
                            "}" +
                            ".button:hover {" +
                            "    background-color: #45a049;" +  // Hi·ªáu ·ª©ng hover l√†m n·ªÅn chuy·ªÉn m√†u
                            "}" +
                            ".footer {" +
                            "    font-size: 14px;" +
                            "    color: #777;" +
                            "    margin-top: 40px;" +
                            "    text-align: center;" +
                            "    line-height: 1.6;" +
                            "}" +
                            "</style>" +
                            "</head>" +
                            "<body>" +
                            "<div class='email-container'>" +
                            "<div class='header'>" +
                            "<h2>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trang web c·ªßa ch√∫ng t√¥i!</h2>" +
                            "</div>" +
                            "<div class='content'>" +
                            "<p>Xin ch√†o <strong>%s</strong>,</p>" +
                            "<p>Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o r·∫±ng t√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng tr√™n trang web c·ªßa ch√∫ng t√¥i. H√£y b·∫Øt ƒë·∫ßu kh√°m ph√° c√°c t√≠nh nƒÉng tuy·ªát v·ªùi v√† ti·ªán √≠ch m√† ch√∫ng t√¥i cung c·∫•p!</p>" +
                            "<p><strong>Th√¥ng tin ƒëƒÉng nh·∫≠p n·∫øu mu·ªën s·ª≠ d·ª•ng t√†i kho·∫£n v√† m·∫≠t kh·∫©u:</strong></p>" +
                            "<ul>" +
                            "<li><strong>username:</strong> %s</li>" +
                            "<li><strong>password:</strong> %s</li>" +
                            "</ul>" +
                            "<p>B·∫°n c√≥ th·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u b·∫•t c·ª© l√∫c n√†o t·ª´ trang c√†i ƒë·∫∑t c·ªßa t√†i kho·∫£n.</p>" +
                            "<p>ƒê·ª´ng qu√™n truy c·∫≠p v√†o trang web ƒë·ªÉ tr·∫£i nghi·ªám c√°c t√≠nh nƒÉng m·ªõi nh·∫•t!</p>" +
                            "<a href='http://localhost:8080' class='button'>Truy c·∫≠p trang web ngay</a>" +
                            "</div>" +
                            "<div class='footer'>" +
                            "<p>Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi c√πng ch√∫ng t√¥i!<br>ƒê·ªôi ng≈© h·ªó tr·ª£ lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n khi c·∫ßn.</p>" +
                            "</div>" +
                            "</div>" +
                            "</body>" +
                            "</html>", username,username, password
            );


            helper.setTo(toEmail);
            helper.setSubject(subject);
            helper.setText(body, true);

            mailSender.send(message);
        } catch (Exception e) {
            e.printStackTrace();
            throw new MailException("Failed to send email to " + toEmail) {};
        }
    }
}
